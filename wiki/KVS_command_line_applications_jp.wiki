#summary KVS コマンドラインアプリケーション.
#sidebar table_of_contents_jp

= KVS コマンドラインアプリケーション =

KVSをインストール後に、以下のコマンドラインツールがインストールされる。

 * kvsmake:  KVSを利用したプログラム向けのコンパイルコマンド。
 * kvscheck: KVSのバージョンやコンパイラの情報などをチェックするためのコマンド。
 * kvsconv:  KVSで可視化を行うためのデータ変換コマンド。
 * kvsview:  KVSで読み込み可能なデータを簡単に可視化するためのコマンド。

それぞれのコマンドについて、以下に説明する。

= kvsmake =

=== 機能 ===
KVSを利用するために必要な設定（インクルードパスおよびライブラリパスの設定やライブラリファイルのリンクなど）を組み込んだメイクファイルを自動生成し、実行ファイルまたはライブラリを作成（コンパイル）する。

=== 使用方法 ===

{{{
Usage: kvsmake [options] <project_name/make_options>

Options:
-h      : ヘルプメッセージを表示する。
-g      : プロジェクト名を指定しメイクファイルを生成する。
-G      : カレントディレクトリ名をプロジェクト名としてメイクファイルを生成する。
-v      : VC向けのプロジェクトファイルを生成する。
-vc     : -vと同じ。
-vcproj : -vと同じ。
-q      : Qt向けのプロジェクトファイルを生成する。
-qt     : -qと同じ。
-qtproj : -qと同じ。
}}}

=== 備考 ===
KVS以外のライブラリをリンクして利用したい場合、カレントディレクトリに「kvsmake.conf」という名前の設定ファイルを準備する。設定ファイルの記述方法は以下の通りである。

kvsmake.confの記述
 * ファイル名は「kvsmake.conf」とする。
 * kvsmakeを実行するディレクトリに置いておく。
 * ファイル内に以下の変数を必要に応じて設定する。
  * INCLUDE_PATH	インクルードパス
  * LIBRARY_PATH	ライブラリパス
  * LINK_LIBRARY	リンクするライブラリ名
  * INSTALL_DIR	インストールディレクトリ名

  * 例）kvsmake.confにパスとライブラリを追加設定する。
{{{
% less kvsmake.conf
INCLUDE_PATH := /home/usrname/local/include
LIBRARY_PATH := /home/usrname/local/lib
LINK_LIBRARY := -lusrlib
INSTALL_DIR := /home/usrname/local/bin
}}}

=== 使用例 ===

 # プロジェクト名をカレントディレクトリ名としてコンパイルする。
{{{
% kvsmake -G
% kvsmake
※例えば、カレントディレクトリが「Test」の場合、「Test」という名前（Windows環境では拡張子「exe」が付く）の実行ファイルが生成される。
}}}
 # プロジェクト名を指定し、コンパイルする。
{{{
% kvsmake -g <プロジェクト名>
% kvsmake
※例えば、プロジェクト名を「Test」と指定すると、「Test」という名前の実行ファイル（Windows環境では拡張子「exe」が付く）が生成される。
}}}
 # ライブラリファイルを生成する。
{{{
% kvsmake -G　　または　　kvsmake -g <実行ファイル名>
% kvsmake lib
※例えば、プロジェクト名が「Test」の場合、「libTest.a」という名前のライブラリファイル（Windows環境では拡張子は「lib」となる）が生成される。
}}}
 # Microsoft Visual C/C++向けのプロジェクトファイルを生成する。
{{{
% kvsmake -vcproj <プロジェクト名>
※生成される「<プロジェクト名>.xxx」をダブルクリックしIDEを起動する。
}}}
 # Trolltech社 Qt向けプロジェクトファイルを生成する。
{{{
% kvsmake -qtproj <プロジェクト名>
% qmake
※「<プロジェクト名>.pro」が生成されるので、qmakeコマンドを利用してコンパイルする。
}}}

= kvscheck =

=== 機能 ===
KVSのバージョンや利用しているコンパイラの情報などを標準出力に表示する。また、KVSがサポートしている他のライブラリ（GLUT, Qt, SAGEなど）のバージョン情報や、KVSで読み込み可能なデータファイルのチェックも行うことができる。

=== 使用方法 ===
{{{
Usage: kvscheck [options] <input value>

Options:
-h        : ヘルプメッセージを表示する。
-version  : KVSのバージョンを表示する 。(optional)
-platform : プラットフォーム情報を表示する。 (optional)
-compiler : コンパイラ情報を表示する。(optional)
-support  : サポートしている他ライブラリの情報を表示する。 (optional)
-opengl   : OpenGLに関する情報を表示する。 (optional)
-file     : KVSで読み込み可能なファイルの情報を表示する (optional: <filename>)
}}}

=== 使用例 ===

 # 現在インストールされているKVSのバージョンをチェックする。
{{{
% kvscheck -version
KVS version: 1.0.0 (beta 2)
}}}
 # 現在作業しているプラットフォームの情報を表示する。
{{{
% kvscheck -platform
Platform:   Mac OS X
CPU:        Intel x86 (32 bits)
Cores:      2 core(s)
Byte-order: Little endian
}}}
 # 利用するコンパイラに関する情報を表示する。
{{{
% kvscheck -compiler
Compiler: GNU C/C++ (4.0.1)
}}}
 # サポートしている他ライブラリに関する情報を表示する。
{{{
% kvscheck -support
Supported libraries:
GLUT - The OpenGL Utility Toolkit (version: 5)
GLEW - The OpenGL Extension Wrangler Library (version: 1.4.0)
SAGE - Scalable Adaptive Graphics Environment (version: 2.0)
}}}
 # OpenGLに関する情報を表示する。
{{{
% kvscheck -opengl
Vendor:      NVIDIA Corporation
Renderer:    NVIDIA GeForce 8600M GT OpenGL Engine
GL Version:  2.0 NVIDIA-1.5.36
GLU Version: 1.3 MacOSX
GL Extensions (112):
	GL_ARB_transpose_matrix
...
	GL_SGIS_texture_edge_clamp
	GL_SGIS_texture_lod
GLU Extensions (0):
}}}
 # KVSで読み込むことができるデータ（以下ではAVS Field data）の情報を表示する。
{{{
% kvscheck -file lobster.fld
Reading time:      0.049526 [sec]
Information:
bits    : 8
signed  : unsigned
veclen  : 1
nspace  : 3
ndim    : 3
dim     : 120 120 34
min ext : 0 0 0
max ext : 1 1 1
data    : byte
field   : uniform
label   :
}}}

= kvsconv =

=== 機能 ===
KVSで読み込み可能なデータを対象としてデータ変換を行う。KVSフォーマットへはこのコマンドを利用して変換することができる。

=== 使用方法 ===
{{{
Usage: kvsconv [options] <input value>

Options:
-h         : ヘルプメッセージを表示する。
-help      : 変換コマンドごとのヘルプメッセージを表示する。 (ex. -help fld2kvsml)
-fld2kvsml : AVS Field データからKVSML（Structured volume object）データへ変換する。
-ucd2kvsml : AVS UCD データからKVSML（Unstructured volume object）データへ変換する。
-img2img   : 画像データの変換を行う。
}}}

 # AVS Field データからKVSML（Structured volume object）データへの変換
{{{
Usage: kvsconv -fld2kvsml [options] <input data file>

Options:
-output : 出力ファイル名を指定する。 (default: <input_basename>.<output_extension>)
-e      : データ部分を外部ファイルとして出力する。 (optional)
-b      : データ部分をバイナリ形式の外部ファイルとして出力する。 (optional)
}}}
 # AVS UCD データからKVSML（Unstructured volume object）データへの変換
{{{
Usage: kvsconv -ucd2kvsml [options] <input data file>

Options:
-output : 出力ファイル名を指定する。 (default: <input_basename>.<output_extension>)
-e      : データ部分を外部ファイルとして出力する。 (optional)
-b      : データ部分をバイナリ形式の外部ファイルとして出力する。 (optional)
}}}
 # 画像データの変換を行う。
{{{
Usage: kvsconv -img2img [options] <input data file>

Options:
-output	: 出力ファイル名を指定する。 (default: <input_basename>.<output_extension>)
-s		: 画像を拡大／縮小する。 (optional: <scale>)
-r		: 画像サイズを変更する。 (optional: <width> <height>)
-g		: 手法を指定してグレースケール画像に変換する。 (default: 0)
			0 = Mean value
			1 = Middle value
			2 = Median value
			3 = NTSC weighted mean value
			4 = HDTV weighted mean value
-b		: 手法を指定して二値画像に変換する。 (default: 0)
			0 = P-Tile
			1 = Distinction
			2 = Byer
			3 = Halftone
			4 = Emphasized halftone
			5 = Screw
			6 = Deformed screw
			7 = Dot concentrate
}}}

=== 使用例 ===

 # AVS Field データをKVSMLデータ（内部データタイプ）に変換する。
{{{
% kvsconv -fld2kvsml lobster.fld -output lobster.kvsml
% ls
lobster.fld    lobster.kvsml
}}}
 # AVS Field データをKVSMLデータ（アスキー形式外部データタイプ）に変換する。
{{{
% kvsconv -fld2kvsml lobster.fld -e -output lobster.kvsml
% ls
lobster.fld    lobster.kvsml    lobster_value.dat
}}}
 # AVS UCD データをKVSMLデータ（バイナリ形式外部データタイプ）に変換する。
{{{
% kvsconv -ucd2kvsml blunt.inp -e -b -output blunt.kvsml
% ls
blunt.inp    blunt.kvsml    blunt_connect.dat    blunt_coord.dat    blunt_value.dat
}}}
 # 画像を拡大する。
{{{
% kvsconv -img2img lenna.bmp -s 2 -output lenna2.bmp
}}}
 # 画像をグレースケール化（Mean value法）する。
{{{
% kvsconv -img2img lenna.bmp -g 0 -output lenna_gray.bmp
}}}
 # 画像を二値化（P-Tile法）する。
{{{
% kvsconv -img2img lenna.bmp -b 0 -output lenna_bit.bmp
}}}

= kvsview =

=== 機能 ===
KVSで読み込み可能なデータに対して、指定する手法で可視化した結果を表示する。手法を指定しない場合、ファイル形式に応じて、可視化パイプラインを構築し表示を行う。

=== 使用方法 ===
{{{
Usage: kvsview [options] <input data file>

Options:
-h			: ヘルプメッセージを表示する。
-help			: 変換コマンドごとのヘルプメッセージを表示する。 (ex. -help Isosurface)
-PointRenderer		: ポイントデータに対してPointRendererを利用して表示する。
-LineRenderer		: ラインデータに対してLineRendererを利用して表示する。
-PolygonRenderer	: ポリゴンデータに対してPolygonRendererを利用して表示する。
-ParticleVolumeRenderer	: ボリュームデータに対してPBVRでの可視化結果を表示する。※未実装
-RayCastingRenderer	: ボリュームデータに対してレイキャスティングでの可視化結果を表示する。※未実装
-OrthoSlice		: ボリュームデータに対して直交断面を表示する。
-SlicePlane		: ボリュームデータに対して任意断面を表示する。
-Isosurface		: ボリュームデータに対して等値面抽出結果を表示する。
-TransferFunction	: 伝達関数（カラーマップ）を表示する。
-ExtractEdges		: ボリュームデータに対して格子エッジを表示する。
-ExtractVertices 	: ボリュームデータに対して格子点を表示する。
-ExternalFaces		: ボリュームデータに対してデータ境界面（最外表面）を表示する。
}}}

 # PointRendererを利用した表示
{{{
Usage: kvsview -PointRenderer [options] <input data file>

Options:
-background_color	: 背景色を指定する。 (default: 212 221 229)
-background_color2	: 背景色（上部と下部）を指定する。 (optional: <top: r g b> <bottom: r g b>)
-bounds			: 境界ボックス（バウンディングボックス）を表示する。 (optional)
-bounds_color		: 境界ボックスの色を指定する。 (default: 0 0 0)
-screen_position	: スクリーンの表示位置を指定する。 (default: 0 0)
-screen_size		: スクリーンの大きさを指定する。 (default: 512 512)
-output			: 出力ファイル名を指定する。 (optional: <filename>)
-verbose		: 詳細情報を出力する。 (optional)
}}}
 # 等値面抽出結果の表示
{{{
Usage: kvsview -Isosurface [options] <input data file>

Options:
-background_color	: 背景色を指定する。 (default: 212 221 229)
-background_color2	: 背景色（上部と下部）を指定する。 (optional: <top: r g b> <bottom: r g b>)
-bounds			: 境界ボックス（バウンディングボックス）を表示する。 (optional)
-bounds_color		: 境界ボックスの色を指定する。 (default: 0 0 0)
-screen_position	: スクリーンの表示位置を指定する。 (default: 0 0)
-screen_size		: スクリーンの大きさを指定する。 (default: 512 512)
-output			: 出力ファイル名を指定する。 (optional: <filename>)　※未実装
-verbose		: 詳細情報を出力する。 (optional)
-l			: 等値面レベルを指定する。 (default: 0)
-n			: 法線ベクトルの設定位置（poly[gon], vert[ex]）を指定する。 (default: poly)
-t			: 伝達関数ファイルを指定する。 (optional: <filename>)
}}}

=== 使用例 ===

 # ポイントデータを表示する。背景色を黒（0 0 0）、スクリーンサイズを800x600にする。
{{{
% kvsview -PointRenderer point_object.kvsml -background_color 0 0 0 -screen_size 800 600
}}}
 # 等値面抽出結果（等値面レベル：100、頂点に法線ベクトル）を表示する。境界ボックスも表示する。
{{{
% kvsview -Isosurface lobster.fld -bounds -l 100 -n vert
}}}
 # 画像を表示する。
{{{
% kvsview lenna.bmp
※画像の場合は、可視化手法を指定する必要はなく表示可能である。
}}}
 # ポリゴンデータを表示する。可視化手法を指定しない場合は、自動的にPolygonRendererを利用して可視化する。
{{{
% kvsview polygon_object.kvsml
}}}
 # ボリュームデータを表示する。可視化手法を指定しない場合は、レイキャスティングでの可視化結果を表示する。
{{{
% kvsview lobster.kvsml
}}}