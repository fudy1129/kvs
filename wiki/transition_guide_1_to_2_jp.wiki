= KVS 1.x から 2.x への移行ガイド =

KVS 1.x から2.0へのバージョンアップに伴い、いくつかの仕様の変更とAPIの変更があります。ここでは、移行の際のガイドラインとして、変更があった仕様およびクラスについて、その修正方法とともにまとめています。

<wiki:toc max_depth="3"/>

----

== バージョンの確認 ==
現在、利用しているKVSのバージョンを確認する方法について説明します。

=== kvscheckコマンドを利用した確認方法 ===
kvscheckコマンドを利用して、現在インストールされているKVSのバージョンを確認することができます。コマンドターミナルを開けて、以下のようにコマンドを実行してください。kvscheckコマンドの利用法については[KVS_kvscheck_jp こちら]を参考にしてください。

{{{
> kvsmake -version
KVS version: 2.0.0
}}}

=== ソースコード内での確認方法 ===
kvs::Versionクラスを利用して、ソースコード内でKVSのバージョンを確認することができます。ヘッダファイル「`<kvs/Version>`」をインクルードし、以下のようにしてバージョン情報を取得することができます。[KVS_programming_build_jp こちら]にも説明がありますので、参考にしてください。

{{{
#include <kvs/Version>
}}}
{{{
size_t major = kvs::Version::MajorVersion(); // メジャーバージョン番号の取得
size_t minor = kvs::Version::MinorVersion(); // マイナーバージョン番号の取得
size_t patch = kvs::Version::PatchVersion(); // パッチバージョン番号の取得
}}}

=== プリプロセッサ命令を利用した確認方法 ===
プリプロセッサ命令（#if）を利用して、コンパイル時にバージョンを確認することができます。ヘッダファイル「`<kvs/Version>`」をインクルードし、以下のようにしてバージョンの違いによりソースコードの記述を切り分けることができます。

{{{
#include <kvs/Version>
}}}
{{{
#if ( KVS_VERSION_MAJOR == 1 )
    // KVSのバージョンが1.x.xのときの処理
#elif ( KVS_VERSION_MAJOR == 2 )
    // KVSのバージョンが2.x.xのときの処理
#endif
}}}

== 削除されたクラス ==

=== kvs::glut::!GlobalBase, kvs::glut::!ScreenBaseなど ===
KVS1.0をリリースする以前のバージョンでは、たとえば、GLUTを使ってビューワアプリケーションを作成する場合は、ユーザが`kvs::glut::GlobalBase`および`kvs::glut::ScreenBase`を継承して独自のグローバルクラスおよびスクリーンクラスを定義する必要がありました。KVS1.0では、`kvs::glut::Application`および`kvs::glut::Screen`を利用して、継承することなく、ビューワアプリケーションの開発が可能となりましたが、下位バージョンとの互換性のために、それらに関連するクラスを残していました。KVS2.0へのバージョンアップを機に、下位互換性のために残していた以下のクラスを削除しました。

{{{
// 削除されたクラス
kvs::GlobalCore
kvs::ScreenCore
kvs::WindowBase
kvs::glut::GlobalBase
kvs::glut::ScreenBase
kvs::glut::Window
kvs::qt::GlobalBase
kvs::qt::ScreenBase
kvs::qt::Window
kvs::sage::GlobalBase
kvs::sage::ScreenBase
}}}

KVS2.0以降のバージョンでは、以下のクラスを利用してください。ビューワアプリケーションの開発は、[KVS_programming_draw_jp こちら]を参考にしてください。

{{{
kvs::glut::Application
kvs::glut::Screen
kvs::qt::Application
kvs::qt::Screen
kvs::sage::Application
kvs::sage::Screen
}}}

== ユーティリティクラス ==

=== kvs::!CommandLine ===
KVS 1.xでは、add_help_option, add_option, add_valueメソッドがprotected属性であったために、ユーザプログラム内で、kvs::!CommandLineクラスを継承し、独自のコマンド引数処理クラスを定義する必要がありました。KVS 2.0では、これらのメソッドをpublic属性として定義することで、継承することなくコマンドライン引数の処理を行うことが可能となります。その他、いくつかのメソッド名の変更があります。

==== 修正点 ====
メソッド名を以下のように修正してください。kvs::!CommandLineクラスを継承せずに利用する方法については、[guide_commandline_jp こちら]を参考にしてください。
{{{
// 修正前
add_help_option
add_option
add_value

noptions
nvalues
}}}
{{{
// 修正後
addHelpOption
addOption
addValue

numberOfOptions
numberOfValues
}}}

=== kvs::Directory ===
「ディレクトリが存在するかどうか」を確認するためのメソッド名を変更しました。

==== 修正点 ====
メソッド名を以下のように修正してください。
{{{
// 修正前
isExisted
}}}
{{{
// 修正後
exists
}}}

=== kvs::File ===
「ファイルが存在するかどうか」を確認するためのメソッド名を変更しました。

==== 修正点 ====
メソッド名を以下のように修正してください。
{{{
// 修正前
isExisted
}}}
{{{
// 修正後
exists
}}}

=== kvs::Endian ===
いくつかのメソッド名および引数の仕様を変更しました。

==== 修正点1 ====
Checkが何を確認するのかが不明瞭であったため、Checkを廃止し、具体的にビッグエンディアンまたはリトルエンディアンかどうかを確認するためのメソッド（!IsBig, !IsLittle）を追加しましたので、以下のように修正してください。

{{{
// 修正前
if ( kvs::Endian::Check() == kvs::Endian::Big )
    // ビッグエンディアンであった場合の処理
if ( kvs::Endian::Check() == kvs::Endian::Little )
    // リトルエンディアンであった場合の処理
}}}

{{{
// 修正後
if ( kvs::Endian::IsBig() )
    // ビッグエンディアンであった場合の処理
if ( kvs::Endian::IsLittle() )
    // リトルエンディアンであった場合の処理
}}}

==== 修正点2 ====
プログラミング規約に従いバイトスワップ対象となる数値を参照渡しではなくポインタ渡しに変更しましたので、以下のように修正してください。

{{{
// 修正前
kvs::Real32 value = 123.4f;
kvs::Endian::Swap( value );
}}}

{{{
// 修正後
kvs::Real32 value = 123.4f;
kvs::Endian::Swap( &value );
}}}


=== kvs::!ValueArray ===

=== kvs::!AnyValueArray ===