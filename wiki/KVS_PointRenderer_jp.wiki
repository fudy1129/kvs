#summary KVS 点レンダラー
#sidebar table_of_contents_jp

= 点レンダラー =
点レンダラーは、点オブジェクトを描画するためのレンダラーです。点オブジェクトに格納されている座標データや色データなどの情報をもとにして、OpenGLのGL_POINTSを使って点を描画します。点のサイズを指定した場合には、指定するサイズ（単位はピクセル）の点が正方形として描画されます。

== レンダリング機能 ==
KVSでは、点レンダラーは以下のようのような機能を持っています。

*シェーディング*
 点に設定される法線ベクトルをもとに、光源位置を考慮して陰影処理（シェーディング処理）を行うことで、明暗のコントラストが付き立体感の高い描画が可能です。

*アンチエイリアシング*
 描画される点の輪郭を滑らかに描画することで、ジャギー（jaggy）の発生を軽減し高品位な描画を行うことが可能です。

*両面ライティング*
 照明効果を有効にしている際、通常、点は法線ベクトルと正対する向き（表面）にシェーディング処理が行われますが、その反対側の面（裏面）には処理が行われません。両面ライティングを行うことで、裏面に対してもシェーディング処理が実行されます。

== kvs::!PointRendererクラス ==
KVSでは、点レンダラーはkvs::!PointRendererクラスとして実装されています。以下では、kvs::!PointRendererクラスの主なメソッドについて説明します。

{{{
void enableShading( void )
}}}
*機能*<br>
シェーディング処理を有効にする。

*戻り値*<br>
なし
<br><br>

{{{
void disableShading( void )
}}}
*機能*<br>
シェーディング処理を無効にする。

*戻り値*<br>
なし
<br><br>

{{{
void enableAntiAliasing( const bool multisample = false )
}}}
*機能*<br>
アンチエイリアシング処理を有効にする。

*引数*<br>
multisample　マルチサンプリングのオン・オフ。指定しない場合オフ。

*戻り値*<br>
なし
<br><br>

{{{
void disableAntiAliasing( void )
}}}
*機能*<br>
アンチエイリアシング処理を無効にする。

*戻り値*<br>
なし
<br><br>

{{{
void enableTwoSideLighting( void )
}}}
*機能*<br>
両面ライティング処理を有効にする。

*戻り値*<br>
なし
<br><br>

{{{
void disableTwoSideLighting( void )
}}}
*機能*<br>
両面ライティング処理を無効にする。

*戻り値*<br>
なし
<br><br>

== サンプルプログラム ==

点オブジェクトのサンプルプログラムで示した!CreatePointObject関数を利用してオブジェクトを作成し、それを描画するサンプルコードを以下に示します。

{{{
#include <kvs/glut/Application>
#include <kvs/glut/Screen>
#include <kvs/PointObject>
#include <kvs/PointRenderer>

// メイン関数
int main( int argc, char** argv )
{
    kvs::glut:::Application app( argc, argv );

    // 点オブジェクトの生成
    kvs::PointObject* object = CreatePointObject();

    // 点レンダラーの生成
    kvs::PointRenderer* renderer = new kvs::PointRenderer();
    renderer->disableShading();
    renderer->enableAntiAliasing();
    renderer->enableTwoSideLighting();

    kvs::glut::Screen screen( &app );
    screen.setTitle( “Create Point Renderer” );
    screen.registerObject( object, renderer );
    screen.show();

    return( app.run() );
}
}}}