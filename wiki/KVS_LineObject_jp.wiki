#summary KVS 線分オブジェクト
#sidebar table_of_contents_jp

= 線分オブジェクト =
線分オブジェクトは、点を接続することによって表現することが可能なため、 先に説明した点オブジェクトの情報に加え、点の接続情報を持ちます。

== データ構造 ==
KVSでは、線分オブジェクトは以下のような情報から構成されています。

*座標*
  線分を構成する点の座標を表します。点データと同様に、x, y, z値を並べて定義します。このとき、並べられた順に通し番号（頂点番号）が付けられます。

*色（カラー）*
  線分または点の色を表します。線分を構成する点に対して色を指定した場合、その指定された色から線形補間された色が線分の色となります。

*法線ベクトル*
  頂点の法線を表します。線分を構成する頂点に対して、ベクトルのx, y, z成分を並べて指定します。指定しない場合、シェーディング処理が無効となります。

*太さ（サイズ）*
  線分の太さを表します。太さを指定しない場合は1となります。単位はピクセル（画素）です。

*接続情報*
  線分を構成する頂点番号を表します。このとき、座標値を設定する際に付与される通し番号を適切に指定しなくてはいけません。KVSでは、線分データは、接続情報の指定方法により以下の4種類の線分を表現できます。

 * *線分（strip）*　頂点番号を指定しない場合、頂点を順番に接続して折れ線を表現します。

 * *一本線（uniline）*　通る頂点のみを指定し、指定された点を順に接続して折れ線を表現します。

 * *複数線（polyline）*　始点と終点を複数指定することで、複数の折れ線を表現します。始点と終点の間にある頂点を順に接続します。

 * *分割線（segment line）*　始点と終点を複数指定することで、複数の直線を表現します。始点と終点を直線的に接続します。

== Line Objectクラス ==
KVSでは、線分オブジェクトはkvs::!LineObjectクラスとして実装されています。以下では、kvs::!LineObjectクラスの主なメソッドについて説明します。

{{{
const kvs::ValueArray<kvs::Real32>& coords( void )
}}}
*機能*<br>
点の座標値の配列を返す。

*戻り値*<br>
32ビット実数型の座標値の配列クラス
<br><br>

{{{
const kvs::ValueArray<kvs::UInt8>& colors( void )
}}}
*機能*<br>
点または線分のカラー値の配列を返す。

*戻り値*<br>
8ビット符号なし整数型のカラー値の配列クラス
<br><br>

{{{
const kvs::ValueArray<kvs::Real32>& normals( void )
}}}
*機能*<br>
点の法線ベクトルの配列を返す。

*戻り値*<br>
32ビット実数型の法線ベクトルの配列クラス
<br><br>

{{{
const kvs::ValueArray<kvs::Real32>& sizes( void )
}}}
*機能*<br>
線分の太さの配列を返す。

*戻り値*<br>
32ビット実数型の線の太さの配列クラス
<br><br>

{{{
const kvs::ValueArray<kvs::UInt32>& connections( void )
}}}
*機能*<br>
接続情報の配列（頂点番号の配列）を返す。

*戻り値*<br>
32ビット符号なし整数型の接続情報の配列クラス
<br><br>

{{{
const size_t nvertices( void )
}}}
*機能*<br>
点の数を返す。

*戻り値*<br>
点の数
<br><br>

{{{
const size_t ncolors( void )
}}}
*機能*<br>
カラー値の数を返す。

*戻り値*<br>
点または線分のカラー値の数。１の場合、すべての線分が同一色であることを示す。
<br><br>

{{{
const size_t nnormals( void )
}}}
*機能*<br>
法線ベクトルの数を返す。

*戻り値*<br>
法線ベクトルの数
<br><br>

{{{
const size_t nsizes( void )
}}}
*機能*<br>
線分のサイズ値の数を返す。

*戻り値*<br>
線分のサイズ値の数。１の場合、すべての線分が同一サイズであることを示す。
<br><br>

{{{
const size_t nconnections( void )
}}}
*機能*<br>
接続情報（頂点番号）の数を返す。

*戻り値*<br>
接続情報の数
<br><br>

{{{
const LineType lineType( void ) const
}}}
*機能*<br>
線分の種類を返す。

*戻り値*<br>
以下のいずれかの値を返す。
 * kvs::!LineObject::Strip ... 線分
 * kvs::!LineObject::Uniline ... 一本線
 * kvs::!LineObject::Polyline ... 複数線
 * kvs::!LineObject::Segment ... 分割線
 * kvs::!LineObject::!UnknownLineType ... その他
<br>

{{{
const ColorType colorType( void ) const
}}}
*機能*<br>
線分の色づけの種類を返す。

*戻り値*<br>
以下のいずれかの値を返す。
 * kvs::!LineObject::!VertexColor ... 点ごとに色付け
 * kvs::!LineObject::!LineColor ... 線分ごとに色付け
 * kvs::!LineObject::!UnknownColorType ... その他
<br>

{{{
const kvs::Vector3f coord( const size_t index ) const
}}}
*機能*<br>
指定されたインデックス番号の点の座標値を返す。

*引数*<br>
index　点のインデックス番号。

*戻り値*<br>
指定されたインデックス番号の点の座標値（3次元ベクトルクラス）
<br><br>

{{{
const kvs::RGBColor color( const size_t index ) cosnt
}}}
*機能*<br>
指定されたインデックス番号の線分または点のカラー値を返す。

*引数*<br>
index　線分または点のインデックス番号。

*戻り値*<br>
格納されている線分オブジェクトの色付けの種類が!LineColorの場合、指定されるインデックス番号の線分のカラー値（RGBカラークラス）。!VertexColorの場合、指定されるインデックス番号の点のカラー値。
<br><br>

{{{
const kvs::Vector3f normal( const size_t index ) const
}}}
*機能*<br>
指定されたインデックス番号の点の法線ベクトルを返す。

*引数*<br>
index　点のインデックス番号。

*戻り値*
指定されたインデックス番号の点の法線ベクトル（3次元ベクトルクラス）
<br><br>

{{{
const kvs::Real32 size( const size_t index ) const
}}}
*機能*<br>
指定されたインデックス番号の線分のサイズを返す。

*引数*<br>
index　線分のインデックス番号。

*戻り値*<br>
指定されたインデックス番号の線分のサイズ
<br><br>

{{{
const kvs::Vector2ui connection( const size_t index ) const
}}}
*機能*<br>
指定されたインデックス番号の線分を構成する頂点番号を返す。

*引数*<br>
index　線分のインデックス番号。

*戻り値*<br>
指定されたインデックス番号の線分を構成する頂点番号（2次元ベクトルクラス）
<br><br>

{{{
void setCoords( const kvs::ValueArray<kvs::Real32>& coords )
}}}
*機能*<br>
点の座標値を設定する。設定する座標値を、x, y, zを点数分並べた配列として指定する。

*引数*<br>
coords　点の座標値の配列。指定する配列の型は32ビット実数型である。
<br><br>

{{{
void setColors( const kvs::ValueArray<kvs::UInt8>& colors )
}}}
*機能*<br>
線分または点のカラー値を設定する。設定するカラー値を、R, G, Bを点数分並べた配列として指定する。

*引数*<br>
colors　線分または点のカラー値の配列。指定する配列の型は8ビット符号なし整数型である。
<br><br>

{{{
void setNormals( const kvs::ValueArray<kvs::Real32>& normals )
}}}
*機能*<br>
点の法線ベクトルを設定する。設定する法線ベクトルを、x, y, zを点数分並べた配列として指定する。

*引数*<br>
normals　法線ベクトルの配列。指定する配列の型は32ビット実数型である。
<br><br>

{{{
void setSizes( const kvs::ValueArray<kvs::Real32>& sizes )
}}}
*機能*<br>
点のサイズを設定する。設定するサイズ値を、それを点数分並べた配列として指定する。

*引数*<br>
sizes　点のサイズ値の配列。指定する配列の型はfloat型である。
<br><br>

{{{
void setConnections( const kvs::ValueArray<kvs::UInt32>& connections )
}}}
*機能*<br>
点の接続情報を設定する。

*引数*<br>
normals　接続情報の配列。指定する配列の型は32ビット符号なし整数型である。
<br><br>

{{{
void setLineType( const LineType line_type )
}}}
*機能*<br>
線分の種類を設定する。

*引数*<br>
line_type　線分の種類。以下のいずれかの値を指定する。
 * kvs::!LineObject::Strip ... 線分
 * kvs::!LineObject::Uniline ... 一本線
 * kvs::!LineObject::Polyline ... 複数線
 * kvs::!LineObject::Segment ... 分割線
<br>

{{{
void setColorType( const ColorType color_type )
}}}
*機能*<br>
線分の色づけの種類を設定する。

*引数*<br>
color_type　線分の色づけの種類。以下のいずれかの値を指定する。
 * kvs::!LineObject::!VertexColor ... 点ごとに色付け
 * kvs::!LineObject::!LineColor ... 線分ごとに色付け
<br>

== 作成例 ==
線分オブジェクトを作成し、それを描画するサンプルコードを以下に示します。例では、!CreateLineObject関数で線分オブジェクトを生成しています。

{{{
#include <kvs/glut/Application>
#include <kvs/glut/Screen>
#include <kvs/LineObject>

// 点の数
const size_t N = 4;

// 線分の数
const size_t L = 6;

// 座標値配列の定義
kvs::Real32 CoordArray[ N * 3 ] = {
    1.0, 0.0, 2.0,  // 点0の座標 (1.0, 0.0, 2.0)
    2.0, 0.0, 2.0,  // 点1の座標 (2.0, 0.0, 2.0)
    1.5, 0.8, 1.7,  // 点2の座標 (1.5, 0.8, 1.7)
    1.5, 0.0, 1.1   // 点3の座標 (1.5, 0.0, 1.1)
};

// カラー値配列の定義
kvs::UInt8 ColorArray[ N * 3 ] = {
    255,   0,   0,  // 点0の色 赤(255,   0,   0)
      0, 255,   0,  // 点1の色 緑(  0, 255,   0)
      0,   0, 255,  // 点2の色 青(  0,   0, 255)
    255, 255,   0   // 点3の色 黄(255, 255,   0)
};

// 接続情報配列の定義
kvs::UInt32 ConnectionArray[ L * 2 ] = {
    0, 1,  // 点0と点1を接続
    1, 2,  // 点1と点2を接続
    2, 0,  // 点2と点0を接続
    3, 0,  // 点3と点0を接続
    3, 1,  // 点3と点1を接続
    3, 2   // 点3と点2を接続
};

// 線分オブジェクトを生成する関数
kvs::LineObject* CreateLineObject( void )
{
    // KVSの配列クラス（kvs::ValueArray）にセットする。
    kvs::ValueArray<kvs::Real32> coords( CoordArray, N * 3 );
    kvs::ValueArray<kvs::UInt8> colors( ColorArray, N * 3 );
    kvs::ValueArray<kvs::UInt32> connections( ConnectionArray, L * 2 );

    // 線分オブジェクトを生成する。
    kvs::LineObject* object = new kvs::LineObject();
    object->setCoords( coords );
    object->setColors( colors );
    object->setConnections( connections );
    object->setSize( 10 );
    object->setLineType( kvs::LineObject::Segment );
    object->setColorType( kvs::LineObject::VertexColor );

    // 生成した線分オブジェクトのポインタを返す。
    return( object );
}

// メイン関数
int main( int argc, char** argv )
{
    kvs::glut:::Application app( argc, argv );

    // 線分オブジェクトの生成
    kvs::LineObject* object = CreateLineObject();

    kvs::glut::Screen screen( &app );
    screen.setTitle( “Line Object” );
    screen.registerObject( object );
    screen.show();

    return( app.run() );
}
}}}