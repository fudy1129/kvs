#summary KVS コーディング規約
#sidebar table_of_contents_jp

= 9. コーディング規約 =
ソースコードの一貫性を保ち、拡張性や保守性を高めるために、KVS内部で採用されているコーディング規約についてまとめます。現在のKVSソースコード内では、ある一定の規則のもとでコーディングされていますが、いくつかの部分で曖昧な部分があり、冗長な記述が見られます。ここに規約として明示することで、今後、一貫したスタイルでコーディングをすすめていく予定です。以下では、KVSのコーディング規約をスタイル規約、命名規約、プログラミング規約、ドキュメント規約の５つに分類して説明します。

== 9.1 スタイル規約 ==
字下げや括弧の位置などソースコードの見栄えに関する規約をまとめます。一部のプログラム言語を除き、スタイル自体はプログラムの処理に影響を与えるものではなく必須ではないですが、ソースコードに一貫性を持たせるためにいくつかの規約を決めています。

=== 字下げの幅 ===
字下げはプログラムの構造をわかりやすくするために重要であり、多くのエディタではタブを押下することによって字下げを行います。しかし、タブの幅は設定により異なり、ソースコードを開く環境によってはスタイルを崩す原因となる可能性があります。そのため、KVSでは、字下げはタブ文字を利用せず、半角スペース４文字で表現することとします。

{{{
void Func()
{
    int x;
    int y;
    DoSomething();
}
}}}

=== 中括弧の位置 ===
処理ブロックの範囲を表現する中括弧の位置については、様々なスタイルが存在しますが、KVSでは次のようにスタイルを統一します。中括弧の開始位置（開き中括弧（"{"）の位置）は、if文やfor文などの制御文の後ろではなく、その次の行に改行し、直前の行の先頭文字と同じに位置に置くこととします。また、閉じ中括弧（"}"）は、処理ブロックの最後から独立した位置に置くこととします。

{{{
if ( x == y )
{
   DoSomething();
}

for ( int i = 0; i < n; i++ )
{
   DoSomething();
}
}}}

=== 制御文の括弧の位置 ===
制御文の条件などを記述するための括弧については、ifやforなどの命令の後ろにスペースを空け、空き括弧（"("）を置くこととし、その直後の条件式等は空き括弧の後ろにスペースを明けて記述することとします。また、閉じ括弧（")"）の直前にもスペースを空けることとします。

{{{
if ( x == y )
for ( int i = 0; i < n; i++ )
while ( x < y )
}}}

=== return文の括弧 ===
プログラムにおいて、return文は関数の終了を表し、同時に呼び出しもとに値（戻り値）を返す役割を持ちます。一般的に、return文の戻り値は括弧を付けて記述される場合と付けずに記述される場合がありますが、KVSでは括弧を付けずに記述することとします。

{{{
return x;
}}}

=== 引数なしの関数の定義 ===
引数を持たない関数を定義する場合、明示的にvoidと記述することがありますが、KVSではvoidを付けず括弧のみを記述することとします。

{{{
void Func()
{
    DoSomething();
}
}}}

== 9.2 命名規約 ==
クラスや変数などの名前の付け方に関する規約をまとめます。

=== クラス名 ===
クラス名は、省略形を避け意味や役割が簡単にわかる名前とし、それを構成する各単語は大文字で開始すること（upper camel case）とします。

{{{
ClassName
}}}

=== メンバ変数名 ===
クラスを構成するメンバ変数の名前は、先頭にm_を付け、単語間に下線を付けることとします。メンバ変数も、クラス名同様に、省略形を避け意味が簡単にわかる名前とします。

{{{
m_member_variable
}}}

=== メソッド名（publicおよびprotected属性) ===
public属性およびprotected属性を持つメソッドの名前は、先頭は小文字としてそれ以降の単語は大文字で開始すること（lower camel case）とします。

{{{
methodName
}}}

=== メソッド名（private属性) ===
private属性を持つメソッドの名前は、原則、各単語を小文字で開始し、かつ、単語間に下線を付けることとします。

{{{
method_name
}}}

=== 関数名および静的メソッド名 ===
関数名は、名前を構成する各単語は大文字で開始すること（upper camel case）とします。また、静的メソッドについても、クラスのインスタンスを作成することなく通常の関数と同じような役割を果たすため、関数名と同様の命名規約を適用します。

{{{
FunctionName
StaticMethodName
}}}

=== マクロ名 ===
マクロ名は、全て大文字とし、先頭にKVSを付け、単語間には下線を付けることとします。

{{{
KVS_MACRO_NAME
}}}

== 9.3 プログラミング規約 ==
実装に関する規約をまとめます。

=== メンバ変数の定義 ===
クラスのメンバ変数は、原則、private属性を付けて定義することとします。

{{{
private:
    int m_x;
    int m_y;
}}}

=== 基本型の引数 ===
intやfloatなどの基本型（プリミティブ型）の値を入力として渡す場合は、それが入力値でありかつ変更が許されない値であることを明示するために、const属性を付けて記述することとします。

{{{
void Func( const int x )
}}}

=== ポインタ渡しと参照渡し ===
比較的大きなクラスまたは構造体を関数（メソッド）の引数として渡す場合は、それが入力である場合はconst属性を付けて参照渡しとし、出力または入出力である場合はポインタ渡しとします。

{{{
void Func( const ClassA& input, ClassB* output1, ClassC* input_output )
}}}

=== インクルードガード ===
ヘッダファイルの多重インクルードを防ぐため、すべて大文字で"`KVS__<名前空間名>__<ファイル名>_H_INCLUDE`"という書式のシンボル名を持つインクルードガード（defineガード）をヘッダファイルに記述することとします。ただし、名前空間がない場合は<名前空間>は省略可能であり、<ファイル名>が複数の単語からなる場合は下線で区切り記述することとします。また、最近では、多くのコンパイラで"`#pragma once`"（pragmaガード）が利用可能になってきていることから、defineガードにかえてpragmaガードを試験的に導入していくことを検討しています。

{{{
#ifndef KVS__NAMESPACE__FILE_H_INCLDE
#define KVS__NAMESPACE__FILE_H_INCLDE
...
#endif

#ifndef KVS__FILE_NAME_H_INCLDE
#define KVS__FILE_NAME_H_INCLDE
...
#endif
}}}


== 9.4 ドキュメント規約 ==
コメントの書き方などに関する規約をまとめます。